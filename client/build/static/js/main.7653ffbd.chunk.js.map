{"version":3,"sources":["Smokey.js","App.js","serviceWorker.js","index.js"],"names":["Smokey","props","callBackendAPI","a","fetch","response","json","body","status","Error","message","handleFetchTweets","fetchTweets","then","res","setState","tweetData","express","console","log","state","statuses","this","ping","catch","err","data","acc","currentDate","Date","i","length","created_at","getDate","Component","layer","OlLayerTile","source","OlSourceOsm","londonWebMercator","fromLonLat","map","OlMap","view","OlView","center","zoom","layers","App","useState","visible","setVisible","lon","lat","currentLonLat","setCurrentLonLat","numTweet","setnumTweet","useEffect","method","headers","JSON","stringify","ok","patch","hourAgo","getTime","tweetDate","toggleDrawer","position","top","right","olMap","selected","boundingbox","olView","getView","extent","coord","parseFloat","_proj","getProjection","getCode","fit","duration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.7653ffbd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Smokey extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      tweetData: 1\n    }\n  }\n\n  componentDidMount() {\n    // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ ping: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  // Tests our /ping GET route from the Express server (look inside server.js)\n  callBackendAPI = async () => {\n    const response = await fetch('/ping');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  // Handles the API call, updates the state\n  handleFetchTweets = async() => {\n    this.fetchTweets()\n      .then(\n        res => this.setState({ tweetData: res.express })\n      )\n\n      console.log(this.state.tweetData.statuses)\n  };\n\n  // Calls the Express endpoint\n  fetchTweets = async () => {\n    const response = await fetch('/twitter_test');\n    const body = await response.json();\n    if (response.status !== 200) {\n      throw Error(body.message)\n    }\n    return body;\n  };\n\n  //function that filters tweetdata by date and counts how many tweets on the day.\n  handleFilterArray(){\n    var data = this.state.tweetData.statuses\n    var acc = 0\n    var currentDate = new Date()\n    for (var i = 0; i < data.length; i++){\n      var tweetDate = (new Date(data[i].created_at))\n      if(tweetDate.getDate() === currentDate.getDate()){\n        acc++\n      }\n    }\n    console.log(acc)\n  }\n\n  // Sort Tweet response\n  // tweetNum = async () => {\n  //   console.log(this.state.tweetData.statuses.size)\n  // };\n\n  // Main body\n  render() {\n    return (\n      <>\n      </>\n    )\n  }\n}\n\nexport default Smokey;\n","\n// document for react-geo: https://terrestris.github.io/react-geo-ws/map-integration/nominatim-search.html\n\nimport React, { useState, useEffect } from 'react';\nimport Smokey from './Smokey';\n\nimport OlMap from 'ol/Map';\nimport OlView from 'ol/View';\nimport OlLayerTile from 'ol/layer/Tile';\nimport OlSourceOsm from 'ol/source/OSM';\nimport * as _proj from \"ol/proj\";\n\nimport { Drawer } from 'antd';\n\nimport {\n  SimpleButton,\n  MapComponent,\n  NominatimSearch,\n} from '@terrestris/react-geo';\n\nimport './App.css';\nimport 'ol/ol.css';\nimport 'antd/dist/antd.css';\nimport './react-geo.css';\nimport {fromLonLat} from 'ol/proj';\n\nconst layer = new OlLayerTile({\n  source: new OlSourceOsm()\n});\nconst london = [ -0.126286, 51.508623 ];\nconst londonWebMercator = fromLonLat(london);\n\nconst map = new OlMap({\n  view: new OlView({\n    center: londonWebMercator,\n    zoom: 14,\n  }),\n  layers: [layer]\n});\n\nfunction App() {\n\n  const [visible, setVisible] = useState(false);\n  const [currentLonLat, setCurrentLonLat] = useState({ lon: \"0\", lat: \"0\" });\n  const [numTweet, setnumTweet] = useState(0);\n\n  useEffect(() => { \n    // console.log(currentLonLat)\n    fetch('/client/App', {\n      method:'POST',\n      headers:{'Content-Type':'application/json'},\n      body:JSON.stringify(currentLonLat)\n    })\n    .then(response => { \n        if (response.ok) { \n          return(response.json()) ;\n        }\n      }) .then(data => {\n        var patch = data.express.statuses\n        var acc = 0\n        var hourAgo = new Date().getTime() - 3600000\n        console.log(hourAgo, \"hour ago\")\n      \n        console.log(patch)\n        for (var i = 0; i < patch.length; i++){\n          var tweetDate = (new Date(patch[i].created_at))\n          console.log(tweetDate.getTime(), \"tweet date\")\n          if(tweetDate.getTime() > hourAgo){\n         \n            acc++\n          }\n          else{\n            break\n          }\n        }\n          setnumTweet(acc);\n      }) \n     }, [currentLonLat]);\n\n  const toggleDrawer = () => {\n  setVisible(!visible);\n  };\n  return (\n    <>\n      <div className=\"App\">\n        <MapComponent\n          map={map}\n          />\n        <Smokey\n          />\n      <SimpleButton\n        style={{position: 'fixed', top: '30px', right: '30px'}}\n        onClick={toggleDrawer}\n        icon=\"bars\"\n      />\n      <Drawer\n\n        title=\"isitbusyornot?\"\n        placement=\"right\"\n        onClose={toggleDrawer}\n        visible={visible}\n        mask={false}\n      >\n        <div>\n        Where do you want to go?\n        </div>\n      \n      <NominatimSearch\n        countrycodes=\"gb\"\n        placeholder=\"isitbusyornot...?\"\n        key=\"search\"\n        map={map}\n        onSelect={({ lon, lat, ...selected }, olMap) => {\n          if (selected && selected.boundingbox) {\n            var olView = olMap.getView();\n            var extent = [\n              selected.boundingbox[2],\n              selected.boundingbox[0],\n              selected.boundingbox[3],\n              selected.boundingbox[1],\n            ];\n            extent = extent.map(function (coord) {\n              return parseFloat(coord);\n            });\n            extent = (0, _proj.transformExtent)(\n              extent,\n              \"EPSG:4326\",\n              olView.getProjection().getCode()\n            );\n            olView.fit(extent, {\n              duration: 500,\n            });\n          }\n\n          setCurrentLonLat({ lon, lat });\n        }}\n      />\n      <hr/>\n\n      <div>\n        Tweets in the last hour: <b>{numTweet}</b>\n      </div>\n\n      </Drawer>\n      </div>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import DisplayMap from './DisplayMap';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}